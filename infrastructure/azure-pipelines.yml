name: 0.2.$(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - main

pr:
  autoCancel: true
  drafts: true
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest
  
variables:
  - template: '../pipeline-templates/infrastructure-variables.yml'
  - group: key-vault


stages:
  - stage: plan_base
    displayName: 'Plan Base Infrastructure'
    variables:
      - name: project_folder
        value: infrastructure/stages/base

    jobs:
      - job: plan
        displayName: 'Infrastructure Plan'
        steps:
          - checkout: self
            fetchDepth: 1

          - template: '../pipeline-templates/prepare-credentials.yml'
          - template: '../pipeline-templates/pin-terraform.yml'
          - template: '../pipeline-templates/terraform-init.yml'

          - task: AzureCLI@2
            displayName: 'Download Certificates'
            inputs:
              arguments: '$(TF_STORAGE_ACCOUNT) certs'
              azureSubscription: 'Azure'
              scriptLocation: 'scriptPath'
              scriptPath: '$(Build.SourcesDirectory)/infrastructure/scripts/download-certs.sh'
              scriptType: 'bash'
              workingDirectory: $(project_folder)

          - task: Bash@3
            name: 'terraform_plan'
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                terraform plan \
                  -input=false \
                  -var="resource_group_name=${AZURE_ENV_RG}" \
                  -var "backend_resource_group_name=${KEYVAULT_RESOURCE_GROUP_NAME}" \
                  -var "configuration_keyvault_name=${KEYVAULT_NAME}" \
                  -out ${BUILD_BUILDNUMBER}.tfplan

          - template: '../pipeline-templates/publish-plan.yml'

  - stage: deploy_base
    displayName: 'Deploy Base Infrastructure'
    variables:
      - name: project_folder
        value: infrastructure/stages/base
    jobs:
      - deployment: terraform
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Change Infrastructure'
        environment: 'base'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: '../pipeline-templates/extract-plan.yml'
                - template: '../pipeline-templates/prepare-credentials.yml'
                - template: '../pipeline-templates/pin-terraform.yml'

                - task: Bash@3
                  displayName: 'Terraform Apply'
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                  inputs:
                    targetType: 'inline'
                    workingDirectory: $(project_folder)
                    script: |
                      set -euo pipefail
      
                      terraform apply \
                        -input=false \
                        ${BUILD_BUILDNUMBER}.tfplan



  - stage: plan_kubernetes_prd
    displayName: 'Plan Kubernetes Prd Infrastructure'
    variables:
      - name: project_folder
        value: infrastructure/stages/kubernetes-prd
      - name: TF_STORAGE_BLOB_NAME
        value: kubernetes-prd.terraform.tfstate

    jobs:
      - job: plan
        displayName: 'Infrastructure Plan'
        steps:
          - checkout: self
            fetchDepth: 1

          - template: '../pipeline-templates/prepare-credentials.yml'
          - template: '../pipeline-templates/pin-terraform.yml'
          - template: '../pipeline-templates/terraform-init.yml'

          - task: Bash@3
            name: 'terraform_plan'
            displayName: 'Terraform Plan'
            env:
              ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AZURE_TENANT_ID)
            inputs:
              targetType: 'inline'
              workingDirectory: $(project_folder)
              script: |
                set -euo pipefail

                if [ ${BUILD_REASON} == 'PullRequest' ]; then
                  export TF_CLI_ARGS="-lock=false"
                fi

                terraform plan \
                  -input=false \
                  -var="resource_group_name=${AZURE_ENV_RG}" \
                  -var="aks_cluster_name=aks-boss-crawdad-prd" \
                  -out ${BUILD_BUILDNUMBER}.tfplan

          - template: '../pipeline-templates/publish-plan.yml'
            parameters:
              artifactName: kubernetes-prd.plan

  - stage: deploy_kubernetes_prd
    displayName: 'Deploy Kubernetes Prd'
    variables:
      - name: project_folder
        value: infrastructure/stages/kubernetes-prd
    jobs:
      - deployment: terraform
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Change Infrastructure'
        environment: 'kubernetes-prd'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: '../pipeline-templates/extract-plan.yml'
                  parameters:
                    artifactName: kubernetes-prd.plan
                  
                - template: '../pipeline-templates/prepare-credentials.yml'
                - template: '../pipeline-templates/pin-terraform.yml'

                - task: Bash@3
                  displayName: 'Terraform Apply'
                  env:
                    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
                    ARM_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
                    ARM_TENANT_ID: $(AZURE_TENANT_ID)
                  inputs:
                    targetType: 'inline'
                    workingDirectory: $(project_folder)
                    script: |
                      set -euo pipefail
      
                      terraform apply \
                        -input=false \
                        ${BUILD_BUILDNUMBER}.tfplan