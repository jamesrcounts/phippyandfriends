name: 0.2.$(Rev:r)

resources:
  pipelines:
    - pipeline: build
      source: 'captainkube-docker'
      trigger: true
      branch: azureaiconf.6.21
    - pipeline: helm
      source: 'captainkube-chart'
      trigger: true
      branch: azureaiconf.6.21

trigger:
  batch: true
  paths:
    include:
      - captainkube/azure-pipelines.deploy.yaml
  branches:
    include:
      - main

variables:
  - group: acr
  - group: azure-env
  - name: containerRepository
    value: captainkube
  - name: aksHost
    value: jamesrcounts.com
  - name: imageTag
    value: $(resources.pipeline.build.runName)
  - name: chartTag
    value: $(resources.pipeline.helm.runName)
  - name: HELM_EXPERIMENTAL_OCI
    value: 1
  - name: namespace
    value: charts
  - name: artifact
    value: "$(LOGIN_SERVER)/$(namespace)/$(containerRepository):$(chartTag)"
  - name: local_chart_path
    value: "$(containerRepository)-$(chartTag)"

stages:
  # - template: '../pipeline-templates/parrot-deployment.yml'
  #   parameters:
  #     baseDomain: boss-crawdad-dev.$(aksHost)
  #     environment: kubernetes-dev.apps
  #     kubernetesCluster: aks-boss-crawdad-dev




  # - stage:
  #   displayName: Deploy to DEV
  #   variables:
  #     - name: kubernetesCluster
  #       value: aks-boss-crawdad-dev
  #   jobs:
  #     - deployment: Dev
  #       displayName: Deploy to Dev Environment
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       environment: dev.apps
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: none

  #               - task: HelmInstaller@1
  #                 displayName: 'Install Helm'
  #                 inputs:
  #                   helmVersionToInstall: 'latest'

  #               - task: AzureCLI@2
  #                 displayName: 'Prepare Deployment'
  #                 env:
  #                   AKS_RG: $(AZURE_ENV_RG)
  #                   REGISTRY_SERVER: $(LOGIN_SERVER)
  #                   CHART_PATH: $(local_chart_path)
  #                 inputs:
  #                   addSpnToEnvironment: true
  #                   azureSubscription: 'Azure'
  #                   failOnStandardError: true
  #                   scriptLocation: 'inlineScript'
  #                   scriptType: 'bash'
  #                   inlineScript: |
  #                     set -euo pipefail

  #                     helm version

  #                     echo "Login to AKS"
  #                     az aks get-credentials \
  #                       --resource-group ${AKS_RG} \
  #                       --name $(kubernetesCluster) \
  #                       --admin \
  #                       --overwrite-existing

  #                     echo "Sanity Check"
  #                     helm list -A

  #                     echo "Registry Login"
  #                     echo $servicePrincipalKey | \
  #                       helm registry login ${REGISTRY_SERVER} \
  #                         --username $servicePrincipalId \
  #                         --password-stdin

  #                     echo "Retrieve Artifact"
  #                     helm chart pull $(artifact)

  #                     echo "Unpack Artifact"
  #                     helm chart export "$(artifact)" --destination ./${CHART_PATH}

  #                     echo "Sanity Check"
  #                     helm show chart ./${CHART_PATH}/$(containerRepository)

  #               - task: HelmDeploy@0
  #                 inputs:
  #                   connectionType: 'Azure Resource Manager'
  #                   azureSubscription: 'Azure'
  #                   azureResourceGroup: $(AZURE_ENV_RG)
  #                   kubernetesCluster: $(kubernetesCluster)
  #                   useClusterAdmin: true
  #                   namespace: 'apps'
  #                   command: 'upgrade'
  #                   chartType: 'FilePath'
  #                   chartPath: './$(local_chart_path)/$(containerRepository)'
  #                   releaseName: '$(containerRepository)'
  #                   overrideValues: 'image.tag=$(imageTag),image.repository=$(LOGIN_SERVER)/$(containerRepository)'

  - template: '../pipeline-templates/parrot-deployment.yml'
    parameters:
      environment: dev.apps
      kubernetesCluster: aks-boss-crawdad-dev

  - template: '../pipeline-templates/parrot-deployment.yml'
    parameters:
      baseDomain: boss-crawdad-prd.$(aksHost)
      environment: prd.apps
      kubernetesCluster: aks-boss-crawdad-prd

  # - stage:
  #   displayName: Deploy to PROD
  #   jobs:
  #     - deployment: Prod
  #       displayName: Deploy to Prod Environment
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       environment: prod.apps
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: none

  #               - task: HelmInstaller@1
  #                 displayName: 'Install Helm'
  #                 inputs:
  #                   helmVersionToInstall: '$(helmVersion)'

  #               - task: HelmDeploy@0
  #                 displayName: 'Initialize Helm'
  #                 inputs:
  #                   connectionType: 'Azure Resource Manager'
  #                   azureSubscription: 'AzureMSDN'
  #                   azureResourceGroup: 'container-pipelines-demo'
  #                   kubernetesCluster: 'prod-container-demo'
  #                   useClusterAdmin: true
  #                   command: 'init'
  #                   arguments: '--service-account tiller --force-upgrade'

  #               - task: AzureCLI@2
  #                 displayName: 'Add ACR to Helm Repository list'
  #                 inputs:
  #                   azureSubscription: 'AzureMSDN'
  #                   scriptType: 'bash'
  #                   scriptLocation: 'inlineScript'
  #                   inlineScript: 'az acr helm repo add --name $(registryName)'
  #                   failOnStandardError: true

  #               - task: HelmDeploy@0
  #                 displayName: 'Helm Deploy'
  #                 inputs:
  #                   connectionType: 'Azure Resource Manager'
  #                   azureSubscription: 'AzureMSDN'
  #                   azureResourceGroup: 'container-pipelines-demo'
  #                   kubernetesCluster: 'prod-container-demo'
  #                   useClusterAdmin: true
  #                   namespace: 'apps'
  #                   command: 'upgrade'
  #                   chartType: 'Name'
  #                   chartName: '$(registryName)/$(imageName)'
  #                   releaseName: '$(imageName)'
  #                   overrideValues: 'image.tag=$(Build.BuildNumber),image.repository=$(registryName).azurecr.io/$(imageName)'
  #                   force: true
